
/*
 
     
      private string GetHeader()
    {
        
        return "Registo" + Separador + "Tempo Absoluto (Segundos)" + Separador + "Metodo de Deslocamento Em Uso" + Separador +
            "Vel. Real (Directa, Normal)" + Separador + "Vel. Real (Directa, Kalman)" + Separador +
            "Vel. Virtual (WIP, Normal)" + Separador + "Vel. Virtual (WIP, Kalman)" + Separador + "Vel. Virtual (WIP, Event, Normal)" + Separador +
            "Vel. Virtual + Aumento (WIP)" + Separador + "Joint Vel. Real (Vector 2)" + Separador + "Joint Camera (Vector 3)" + Separador +
            "Joelho Direito (y)" + Separador + "Joelho Esquerdo (y)" + Separador +
            "Desvio Joelho Direito" + Separador + "Desvio Joelho Esquerdo" + Separador +
            "Direito FootStates (WIP)" + Separador + "Esquerdo FootStates (WIP)" + Separador +
            "Direito FootTransitionEvents (WIP)" + Separador + "Esquerdo FootTransitionEvents (WIP)" + Separador +
            "N. Passos Total (WIP)" + Separador + "N. Passos Direito (WIP)" + Separador + "N. Passos Esquerdo (WIP)" + Separador +
            "Altura" + Separador + "Threshold de Velocidade Directa" + Separador + "Threshold de Velocidade WIP" + Separador + "Threshold do Passo (WIP)" + Separador +
            "Nome Joint Vel. Real (Kinect)" + Separador + "Nome Joint Camera (Kinect)" + Separador + "Tempo" + Separador + "Aumento (WIP)" + Separador + "Id";
    }
     
     
     
     
     */

/*
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
     * 
     * 
     * 
     * 
    private void SetUpHeader()
    {
       // _positionThreshold,  (_numSteps) 
       var info = "Registo"                            + Separador + "Tempo Absoluto (Segundos)" + Separador + "Directo ou WIP"              + Separador +
                  "Vel. Real (Directa)"                + Separador + "Vel. Virtual (WIP)"        + Separador + "Threshold de Velocidade"     + Separador +
                  "Threshold do Passo (WIP)"           + Separador + "N. Passos Total (WIP)"     + Separador + "N. Passos Direito (WIP)"     + Separador + 
                  "N. Passos Esquerdo (WIP)"           + Separador + "Joelho Direito (y)"        + Separador + "Joelho Esquerdo (y)"         + Separador + 
                  "Desvio Joelho Direito"              + Separador + "Desvio Joelho Esquerdo"      + Separador + "Hip (Vector 2)"              + Separador + 
                  "Head (Vector 3)"                    + Separador + "Direito FootStates (WIP)"  + Separador + "Esquerdo FootStates (WIP)"   + Separador + 
                  "Direito FootTransitionEvents (WIP)" + Separador + "Esquerdo FootTransitionEvents (WIP)";

       WriteStringInDoc(info, true);
    }
 * 
 * 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 * 
 * 
 * 
 * 
 *  private void GetNumCol(string s)
    {
        char[] del = Separador.ToCharArray();
        NumColunas = s.Split(del).Length;
    }
  
 
       private void SetUpFimCiclo()
    {
        if (NumColunas == 0) return;
        _fimCiclo = "";
        for (int i = 0; i < NumColunas - 1; i++)
        {
            _fimCiclo += "0" + Separador;
        }
        _fimCiclo += "0";
    }
     
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 *  private void GetNumCol(string s)
    {
        char[] del = Separador.ToCharArray();
        NumColunas = s.Split(del).Length;
        // Debug.Log("NumColunas : " + NumColunas);
    }
 *     public void FimCiclo()
    {
//#if !UNITY_ANDROID
        if (!_isInitiate) return;
        
        WriteStringInDoc(_fimCiclo, true);
//#endif
    }
    
  
 * 
 * 
 * private void NovoRegisto()
    {
        // _target = _directory + "\\" +_CurrentFolderDestino ;

        SetUpDirectory();
        _activo = true;
        _inicio = DateTime.Now;
        SetFileName();

        // _positionThreshold,  (_numSteps) 

        var info = "Registo"                            + Separador + "Tempo Absoluto (Segundos)" + Separador + "Directo ou WIP"              + Separador +
                   "Vel. Real (Directa)"                + Separador + "Vel. Virtual (WIP)"        + Separador + "Threshold de Velocidade"     + Separador +
                   "Threshold do Passo (WIP)"           + Separador + "N. Passos Total (WIP)"     + Separador + "N. Passos Direito (WIP)"     + Separador + 
                   "N. Passos Esquerdo (WIP)"           + Separador + "Joelho Direito (y)"        + Separador + "Joelho Esquerdo (y)"         + Separador + 
                   "Diff Joelho Direito"                + Separador + "Diff Joelho Esquerdo"      + Separador + "Hip (Vector 2)"              + Separador + 
                   "Head (Vector 3)"                    + Separador + "Direito FootStates (WIP)"  + Separador + "Esquerdo FootStates (WIP)"   + Separador + 
                   "Direito FootTransitionEvents (WIP)" + Separador + "Esquerdo FootTransitionEvents (WIP)";

        GetNumCol(info); 
        SetUpFimCiclo();
        WriteStringInDoc(info, true);
        // if (IsDebugActivo)
       
    }


 *  private void SetUpFimCiclo()
    {
        if (NumColunas == 0) return;
        _fimCiclo = "";
        for (int i = 0; i < NumColunas - 1; i++)
        {
            _fimCiclo += "0" + Separador;
        }
        _fimCiclo += "0";
       }
  public SaveMessage(string recordName)
    {
        _useDefaultFolder = true;
        _useDefaultDocName = true;
        _activo = false;
        Directory = System.IO.Directory.GetCurrentDirectory();
        CurrentFolderDestino = _defaultFolderDestino = "Walking Data";
        _format = ".csv";
        Separador = ";";

        _caminhoCompleto = null;
        _specialTypeDocName = 0;
        _cont = 0;

        _target = Directory + "\\" + CurrentFolderDestino + "\\";
        IsDebugActivo = false;

        _recordingName = recordName;
        NumColunas = 0;
    }
     
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// _positionThreshold,  (_numSteps) 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    var info = "Registo"                            + Separador + "Tempo Absoluto (Segundos)" + Separador + "Directo ou WIP"              + Separador +
               "Vel. Real (Directa)"                + Separador + "Vel. Virtual (WIP)"        + Separador + "Threshold de Velocidade"     + Separador +
               "Threshold do Passo (WIP)"           + Separador + "Número Passos Total (WIP)" + Separador + "Número Passos Direito (WIP)" + Separador + 
               "Número Passos Esquerdo (WIP)"       + Separador + "Joelho Direito (y)"        + Separador + "Joelho Esquerdo (y)"         + Separador + 
               "Diff Joelho Direito"                + Separador + "Diff Joelho Esquerdo"      + Separador + "Hip (Vector 2)"              + Separador + 
               "Head (Vector 3)"                    + Separador + "Direito FootStates (WIP)"  + Separador + "Esquerdo FootStates (WIP)"   + Separador + 
               "Direito FootTransitionEvents (WIP)" + Separador + "Esquerdo FootTransitionEvents (WIP)";
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     
    public void RecordData(float thresholdVelocidade, float thresholdPosition, float velocidadeReal, float velocidadeWip, float rightDiff, float leftDiff, int numSteps, int rightNumSteps, int leftNumSteps, string estadoActual, string rightFootState, string leftFootState, string rightFootTransitionEvents, string leftFootTransitionEvents, Vector3 rightKnee, Vector3 leftKnee, Vector3 hip, Vector3 head)
    {
//#if !UNITY_ANDROID
        if (!_activo) NovoRegisto();

        DateTime agora = DateTime.Now;
        TimeSpan diff = agora - _inicio;

        Vector2 hipVector2 = new Vector2(hip.x, hip.z);
        
        var thresholdVel = thresholdVelocidade.ToString( new NumberFormatInfo() { NumberDecimalSeparator = "," });
        var thresholdPos = thresholdPosition.ToString(   new NumberFormatInfo() { NumberDecimalSeparator = "," });
        var diffSeconds  = diff.TotalSeconds.ToString(   new NumberFormatInfo() { NumberDecimalSeparator = "," });
        var rightDSring  = rightDiff.ToString(           new NumberFormatInfo() { NumberDecimalSeparator = "," });
        var leftDString  = leftDiff.ToString(            new NumberFormatInfo() { NumberDecimalSeparator = "," });
        var rightKneeY   = rightKnee.y.ToString(         new NumberFormatInfo() { NumberDecimalSeparator = "," });
        var leftKneeY    = leftKnee.y.ToString(          new NumberFormatInfo() { NumberDecimalSeparator = "," });
        var velReal      = velocidadeReal.ToString(      new NumberFormatInfo() { NumberDecimalSeparator = "," });
        var velWip       = velocidadeWip.ToString(       new NumberFormatInfo() { NumberDecimalSeparator = "," });
    
        var registo = _cont++      + Separador + diffSeconds    + Separador + estadoActual  + Separador + velReal                   + Separador + velWip       + Separador +
                      thresholdVel + Separador + thresholdPos   + Separador + numSteps      + Separador + rightNumSteps             + Separador + leftNumSteps + Separador + 
                      rightKneeY   + Separador + leftKneeY      + Separador + rightDSring   + Separador + leftDString               + Separador + hipVector2   + Separador + 
                      head         + Separador + rightFootState + Separador + leftFootState + Separador + rightFootTransitionEvents + Separador + leftFootTransitionEvents
                      ;
        WriteStringInDoc(registo, true);
//#endif
    }
     
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//"Registo" + "Tempo Absoluto (Segundos)" + "Threshold de Velocidade" + "_positionThreshold (WIP)" + "Vel. Real (Directa)" + "Vel. Virtual (WIP)" 
//+ "Directo ou WIP" + "Número de passos Total (WIP)"+ "Número de passos Direito (WIP)" (_numSteps) + "Número de Passos Esquerdo (WIP)" (_numSteps) 
//"Joelho Direito (y)" + "Joelho Esquerdo (y)" + "Diff Joelho Direito" + "Diff Joelho Esquerdo" + "Hip (Vector 2)" + "Head (Vector 3)";
//+ "Direito FootStates (WIP)" + "Esquerdo FootStates (WIP)" 
//+ "Direito FootTransitionEvents (WIP)" + "Esquerdo FootTransitionEvents (WIP)" 

// (Tempo Intervalo / Time.deltaTime) ; Pos Hip(x,z); Pos Head (x,y,z); rightDiff; leftDiff;
// num ; tempo Total (em segundo) ; Threshold de Velocidade ; Joint ; Velocidade Real (Hip) ;  Velocidade Wip (Virtual) ; EstadoPlayer ; RightKnee (Y) ; LeftKnee (Y)

//float velReal = 
//    velocidadeReal

//var diffSeconds     = diff.TotalSeconds.ToString(new NumberFormatInfo() {NumberDecimalSeparator = ","});
//var thresholdString = threshold.ToString(new NumberFormatInfo() {NumberDecimalSeparator = ","});
//var velReal         = velocidadeReal.ToString(new NumberFormatInfo() { NumberDecimalSeparator = "," });
//var velWip = velocidadeWip.ToString(new NumberFormatInfo() {NumberDecimalSeparator = ","});

// Debug.Log("C " + temp + "\n  " + _target + temp + _format + "  Bool "+ File.Exists(_target + temp + _format));
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
         var registo = _cont++     + Separador + diff.TotalSeconds + Separador + deltaTime     + Separador + threshold    + Separador + 
                    joint       + Separador + velocidadeReal    + Separador + velocidadeWip + Separador + estadoActual + Separador + 
                    rightKnee.y + Separador + leftKnee.y        + Separador + rightDiff     + Separador + leftDiff     + Separador + 
                    hipVector2  + Separador + head
                    ;
  */
